<?php

/**
 * @file
 * This module converts HTML into plain text.
 *
 * The kind of thing you might want to do if you're sending the contents of a
 * HTML page as a plain text email.
 *
 * This module based on class.html2text.inc
 * by Jon Abernathy <jon@chuggnutt.com>
 */

/**
 * Implements hook_help().
 */
function html2txt_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('Converts HTML to plain text.');
  }
}

/**
 * Workhorse function that does actual conversion.
 *
 * First performs custom tag replacement specified by $search and
 * $replace arrays. Then strips any remaining HTML tags, and word wraps the text
 * to $width characters.
 */
function html2txt_convert($html, $width = NULL, $links_inline = FALSE, $allowed_tags = '') {
  global $_html2txt_saved_snippets;

  $snippet_count = 1;
  $_html2txt_saved_snippets = array();
  $converted->text = $html;

  $converted->text = trim(stripslashes($converted->text));

  // Get HTML to search for.
  $search = _html2txt_search_define();

  // Get plain text replacements for HTML.
  $replace = _html2txt_replace_define();

  // Strip out links or list them?
  $search[] = '/<a href="([^"]+)"[^>]*>(.+?)<\/a>/ie';

  if ($links_inline) {
    $replace[] = '_html2txt_links_inline("\\1", "\\2")';
  }
  else {
    global $_html2txt_link_list;
    $_html2txt_link_list = '';
    $link_count = 1;
    $replace[] = '_html2txt_links_list_build("\\1", "\\2")';
  }

  // Run our defined search-and-replace.
  $converted->text = preg_replace($search, $replace, $converted->text);

  // Strip any other HTML tags.
  $converted->text = strip_tags($converted->text, $allowed_tags);

  // Add link list.
  if (!empty($_html2txt_link_list)) {
    $converted->links = "Links:\n------\n" . $_html2txt_link_list;
  }

  // Convert HTML entities.
  $translation_table = get_html_translation_table(HTML_ENTITIES);
  $translation_table = array_flip($translation_table);
  $converted->text = strtr($converted->text, $translation_table);

  // Load <code>...</code> snippets back in to text.
  if (!empty($_html2txt_saved_snippets)) {
    foreach ($_html2txt_saved_snippets as $count => $snippet) {
      $converted->text = str_replace('[html2txt-code-snippet-' . $count . ']', "\n" . stripslashes($snippet), $converted->text);
    }
  }

  // Wrap the text to a readable format.
  if ($width) {
    $converted->text = wordwrap($converted->text, $width);
  }

  return $converted;
}

/**
 * List of preg* regular expression patterns to search for.
 *
 * Used in conjunction with $replace.
 */
function _html2txt_search_define() {
  $search = array(
    // Take out <code>...</code> snippets for later.
    '@<code>(.+?)</code>@se',
    // New lines and Carriage returns.
    "/(\r\n|\r|\n)+/",
    // Tabs.
    "/[\t]+/",
    // <script>s -- which strip_tags supposedly has problems with.
    '/<script[^>]*>.*?<\/script>/i',
    // Comments -- which strip_tags might have problem a with.
    // '/<!-- .* -->/',
    // H1.
    '!<h1[^>]*>(.+?)</h[1]>!ie',
    // H2.
    '!<h2[^>]*>(.+?)</h[2]>!ie',
    // H3.
    '/<h3[^>]*>(.+?)<\/h3>/ie',
    // H4 - H6.
    '/<h[456][^>]*>(.+?)<\/h[456]>/ie',
    // <blockquote>.
    '!<blockquote[^>]*>!i',
    // </blockquote>.
    '!</blockquote>!i',
    // <p>.
    '!</p[^>]*>!i',
    // <br>.
    "/<br[^>]*>\n?/i",
    // <b> (will get striped out anyway - leave here to add in options later)).
    // '/<b[^>]*>(.+?)<\/b>/ie',
    // <em> and <i>.
    // '/</?(em|i)[^>]*>(.+?)<\/i>/i',
    // <ul> and </ul>
    '/(<ul[^>]*>|<\/ul>)/i',
    // <ol> and </ol>
    '/(<ol[^>]*>|<\/ol>)/i',
    // <li>
    '/<li[^>]*>/i',
    // <hr>
    '/<hr[^>]*>/i',
    // <table> and </table>
    '/(<table[^>]*>|<\/table>)/i',
    // <tr> and </tr>
    '/(<tr[^>]*>|<\/tr>)/i',
    // <td> and </td>
    '/<td[^>]*>(.+?)<\/td>/i',
    // <th> and </th>
    '/<th[^>]*>(.+?)<\/th>/i',
    '/&nbsp;/i',
    '/&quot;/i',
    '/&gt;/i',
    '/&lt;/i',
    '/&amp;/i',
    '/&copy;/i',
    '/&trade;/i',
    '/&#8220;/',
    '/&#8221;/',
    '/&#8211;/',
    '/&#8217;/',
    '/&#38;/',
    '/&#169;/',
    '/&#8482;/',
    '/&#151;/',
    '/&#147;/',
    '/&#148;/',
    '/&#149;/',
    '/&reg;/i',
    '/&bull;/i',
    '/&[&;]+;/i',
    '/&#39;/',
  );

  return $search;
}

/**
 * List of pattern replacements corresponding to patterns searched.
 */
function _html2txt_replace_define() {
  $replace = array(
    // Take out <code>...</code> snippets for later.
    '_html2txt_get_code_snippets($snippet_count++, "\\1", "\\2")',
    // New lines and Carriage returns.
    " ",
    // Tabs.
    ' ',
    // <script>s -- which strip_tags supposedly has problems with.
    '',
    // Comments -- which strip_tags might have problem a with.
    // '',
    "\"\n\". strtoupper('\\1') . \"\n\n\"",
    // H1.
    // H2.
    "ucwords('\\1') . \"\n\n\"",
    // H3.
    "ucwords('\\1') . \"\n\"",
    // H4 - H6.
    "ucwords('\\1') . \"\n\"",
    // <blockquote>.
    "\n\t",
    // </blockquote>.
    "\n\n",
    // <p>.
    "\n\n",
    // <br>.
    "\n",
    // <b>.
    // 'strtoupper("\\1")',
    // <em> and <i>.
    // '_\\1_',
    // <ul> and </ul>.
    "\n\n",
    // <ol> and </ol>.
    "\n\n",
    // <li>
    "\t*",
    // <hr>
    "-------------------------",
    // <table> and </table>
    "\n\n",
    // <tr> and </tr>
    "\n",
    // <td> and </td>
    "\t\t\\1\n",
    // <th> and </th>
    "strtoupper(\"\t\t\\1\n\")",
    ' ',
    '"',
    '>',
    '<',
    '&',
    '(c)',
    '(tm)',
    '"',
    '"',
    '-',
    "'",
    '&',
    '(c)',
    '(tm)',
    '--',
    '"',
    '"',
    '*',
    '(R)',
    '*',
    '',
    "'",
  );
  return $replace;
}


/**
 * Maintains an internal list of links to be displayed.
 *
 * Links are displayed seperate to the text, with numeric indices to the
 * original point in the text they appeared. Also makes an effort at identifying
 * and handling absolute and relative links.
 */
function _html2txt_links_list_build($link, $display) {
  global $_html2txt_link_list;
  static $links = array();
  static $link_count = 0;

  $duplicate_link = array_keys($links, $link);

  if (count($duplicate_link) == 0) {
    ++$link_count;
    $links[$link_count] = $link;
    $_html2txt_link_list .= "[$link_count] " . html2txt_links_make_absolute($link) . "\n";
    $output = $display . ' [' . $link_count . ']';
  }
  else {
    $output = $display . ' [' . $duplicate_link[0] . ']';
  }

  return $output;
}

/**
 * Scape links inline between parenthesis.
 */
function _html2txt_links_inline($link, $display) {
  $output = "$display (" . html2txt_links_make_absolute($link) . ')';
  return $output;
}

/**
 * Make links absolute.
 */
function html2txt_links_make_absolute($link, $display = NULL) {

  global $base_url;
  $processed_link = $link;

  if (substr($link, 0, 7) != 'http://' && substr($link, 0, 7) != 'mailto:' && substr($link, 0, 8) != 'https://') {
    $processed_link = $base_url;
    if (substr($link, 0, 1) != '/') {
      $processed_link .= '/';
    }
    $processed_link .= $link;
  }

  if ($display == 'image') {
    $processed_link = 'src="' . $processed_link . '"';
  }

  if ($display) {
    $display = str_replace("\'", "'", $display);
    $processed_link = '<a href="' . $processed_link . '">' . $display . '</a>';
  }

  return $processed_link;
}

/**
 * Make image paths absolute.
 */
function html2txt_image_absolute($path) {
  $path = html2txt_links_make_absolute($path);
  $output = 'src="' . $path . '"';
  return $output;
}

/**
 * Temporarily replaces <code>...</code> with a placeholder.
 */
function _html2txt_get_code_snippets($snippet_count, $snippet, $display) {
  global $_html2txt_saved_snippets;

  $_html2txt_saved_snippets[$snippet_count] = $snippet;

  return $display . '[html2txt-code-snippet-' . $snippet_count . ']';
}
